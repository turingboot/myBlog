// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"myBlog/dal/model"
)

func newArticleDetail(db *gorm.DB, opts ...gen.DOOption) articleDetail {
	_articleDetail := articleDetail{}

	_articleDetail.articleDetailDo.UseDB(db, opts...)
	_articleDetail.articleDetailDo.UseModel(&model.ArticleDetail{})

	tableName := _articleDetail.articleDetailDo.TableName()
	_articleDetail.ALL = field.NewAsterisk(tableName)
	_articleDetail.ArticleDetailID = field.NewInt64(tableName, "article_detail_id")
	_articleDetail.ContentMd = field.NewString(tableName, "content_md")
	_articleDetail.ContentHTML = field.NewString(tableName, "content_html")
	_articleDetail.ArticleID = field.NewString(tableName, "article_id")

	_articleDetail.fillFieldMap()

	return _articleDetail
}

type articleDetail struct {
	articleDetailDo

	ALL             field.Asterisk
	ArticleDetailID field.Int64  // 文章详情id
	ContentMd       field.String // 文章markdown内容
	ContentHTML     field.String // 文章html内容
	ArticleID       field.String // 文章id

	fieldMap map[string]field.Expr
}

func (a articleDetail) Table(newTableName string) *articleDetail {
	a.articleDetailDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleDetail) As(alias string) *articleDetail {
	a.articleDetailDo.DO = *(a.articleDetailDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleDetail) updateTableName(table string) *articleDetail {
	a.ALL = field.NewAsterisk(table)
	a.ArticleDetailID = field.NewInt64(table, "article_detail_id")
	a.ContentMd = field.NewString(table, "content_md")
	a.ContentHTML = field.NewString(table, "content_html")
	a.ArticleID = field.NewString(table, "article_id")

	a.fillFieldMap()

	return a
}

func (a *articleDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleDetail) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["article_detail_id"] = a.ArticleDetailID
	a.fieldMap["content_md"] = a.ContentMd
	a.fieldMap["content_html"] = a.ContentHTML
	a.fieldMap["article_id"] = a.ArticleID
}

func (a articleDetail) clone(db *gorm.DB) articleDetail {
	a.articleDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleDetail) replaceDB(db *gorm.DB) articleDetail {
	a.articleDetailDo.ReplaceDB(db)
	return a
}

type articleDetailDo struct{ gen.DO }

func (a articleDetailDo) Debug() *articleDetailDo {
	return a.withDO(a.DO.Debug())
}

func (a articleDetailDo) WithContext(ctx context.Context) *articleDetailDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleDetailDo) ReadDB() *articleDetailDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleDetailDo) WriteDB() *articleDetailDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleDetailDo) Session(config *gorm.Session) *articleDetailDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleDetailDo) Clauses(conds ...clause.Expression) *articleDetailDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleDetailDo) Returning(value interface{}, columns ...string) *articleDetailDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleDetailDo) Not(conds ...gen.Condition) *articleDetailDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleDetailDo) Or(conds ...gen.Condition) *articleDetailDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleDetailDo) Select(conds ...field.Expr) *articleDetailDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleDetailDo) Where(conds ...gen.Condition) *articleDetailDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *articleDetailDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a articleDetailDo) Order(conds ...field.Expr) *articleDetailDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleDetailDo) Distinct(cols ...field.Expr) *articleDetailDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleDetailDo) Omit(cols ...field.Expr) *articleDetailDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleDetailDo) Join(table schema.Tabler, on ...field.Expr) *articleDetailDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *articleDetailDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *articleDetailDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleDetailDo) Group(cols ...field.Expr) *articleDetailDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleDetailDo) Having(conds ...gen.Condition) *articleDetailDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleDetailDo) Limit(limit int) *articleDetailDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleDetailDo) Offset(offset int) *articleDetailDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *articleDetailDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleDetailDo) Unscoped() *articleDetailDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleDetailDo) Create(values ...*model.ArticleDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleDetailDo) CreateInBatches(values []*model.ArticleDetail, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleDetailDo) Save(values ...*model.ArticleDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleDetailDo) First() (*model.ArticleDetail, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDetail), nil
	}
}

func (a articleDetailDo) Take() (*model.ArticleDetail, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDetail), nil
	}
}

func (a articleDetailDo) Last() (*model.ArticleDetail, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDetail), nil
	}
}

func (a articleDetailDo) Find() ([]*model.ArticleDetail, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleDetail), err
}

func (a articleDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleDetail, err error) {
	buf := make([]*model.ArticleDetail, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleDetailDo) FindInBatches(result *[]*model.ArticleDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleDetailDo) Attrs(attrs ...field.AssignExpr) *articleDetailDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleDetailDo) Assign(attrs ...field.AssignExpr) *articleDetailDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleDetailDo) Joins(fields ...field.RelationField) *articleDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleDetailDo) Preload(fields ...field.RelationField) *articleDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleDetailDo) FirstOrInit() (*model.ArticleDetail, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDetail), nil
	}
}

func (a articleDetailDo) FirstOrCreate() (*model.ArticleDetail, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDetail), nil
	}
}

func (a articleDetailDo) FindByPage(offset int, limit int) (result []*model.ArticleDetail, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleDetailDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleDetailDo) Delete(models ...*model.ArticleDetail) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleDetailDo) withDO(do gen.Dao) *articleDetailDo {
	a.DO = *do.(*gen.DO)
	return a
}
